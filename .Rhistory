a <- president_cors %>%
filter(correlation > .4) %>%
igraph::graph_from_data_frame() %>%
create_layout()
a <- president_cors %>%
filter(correlation > .4) %>%
igraph::graph_from_data_frame() %>%
create_layout(layout = "fr")
a
president_cors %>%
filter(correlation > .4) %>%
igraph::graph_from_data_frame() %>%
create_layout(layout = "fr") %>%
left_join(pres_dat[, c(2, 3)], by = c("name" = "president")) %>%
ggraph() +
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
?ggraph
a <- president_cors %>%
filter(correlation > .4) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr")
a$data <- left_join(a$data, pres_dat[, c(2, 3)], by = c("name" = "president"))
a + geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a$data
is.tbl_graph(a)
?igraph::graph_from_data_frame
head(highschool)
president_cors %>%
filter(correlation > .4) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr")+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a$layers
a$mapping
president_cors %>%
filter(correlation > .4) %>%
igraph::graph_from_data_frame() %>%
ggraph(layout = "fr", aes(color = party))+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
rm(a)
a <- president_cors %>%
filter(correlation > .4) %>%
igraph::graph_from_data_frame()
V(a)
igraph::V(a)
pres_dat
party_vec <- pres_dat$party
names(party_vec) <- pres_dat$president
igraph::V(a)$party <- party_vec[as.vector(igraph::V(a))]
igraph::V(a)$party
a %>% ggraph(layout = "fr")+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
traindata
table(traindata$party)
president_cors <- traindata %>% pairwise_cor(president, word, count, sort = TRUE)
president_cors
View(pres_dat)
as.character(igraph::V(a))
igraph::V(a)
names(igraph::V(a))
a <- president_cors %>%
filter(correlation > .4) %>%
igraph::graph_from_data_frame()
igraph::V(a)$party <- party_vec[names(igraph::V(a))]
a %>% ggraph(layout = "fr")+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a <- president_cors %>%
filter(correlation > .3) %>%
igraph::graph_from_data_frame()
igraph::V(a)$party <- party_vec[names(igraph::V(a))]
a %>% ggraph(layout = "fr")+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
# plot
library(ggraph)
set.seed(1911)
a <- president_cors %>%
filter(correlation > .3) %>%
igraph::graph_from_data_frame()
igraph::V(a)$party <- party_vec[names(igraph::V(a))]
a %>% ggraph(layout = "fr")+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
set.seed(1234)
a <- president_cors %>%
filter(correlation > .3) %>%
igraph::graph_from_data_frame()
igraph::V(a)$party <- party_vec[names(igraph::V(a))]
a %>% ggraph(layout = "fr")+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
set.seed(1011)
a <- president_cors %>%
filter(correlation > .3) %>%
igraph::graph_from_data_frame()
igraph::V(a)$party <- party_vec[names(igraph::V(a))]
a %>% ggraph(layout = "fr", circular = TRUE)+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "fr")+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
# plot
library(ggraph)
set.seed(1011)
a <- president_cors %>%
filter(correlation > .35) %>%
igraph::graph_from_data_frame()
igraph::V(a)$party <- party_vec[names(igraph::V(a))]
a %>% ggraph(layout = "fr")+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a <- president_cors %>%
igraph::graph_from_data_frame()
igraph::V(a)$party <- party_vec[names(igraph::V(a))]
a %>% ggraph(layout = "fr")+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
?corrplot::corrplot()
a <- president_cors %>%
filter(correlation > .3) %>%
igraph::graph_from_data_frame()
igraph::V(a)$party <- party_vec[names(igraph::V(a))]
a %>% ggraph(layout = "kk")+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "kk", maxiter = 30)+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "linear")+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "linear", circular = T)+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "circlepack", circular = T)+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "treemap")+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "kk")+
geom_edge_fan(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "kk")+
geom_edge_fan(aes(alpha = correlation), color = "blue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "kk")+
geom_edge_fan(aes(width = correlation), color = "blue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "kk")+
geom_edge_fan(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "kk")+
geom_edge_fan(aes(alpha = correlation, width = correlation), color = "black") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "kk")+
geom_edge_fan(aes(alpha = correlation, width = 1), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "kk")+
geom_edge_fan(aes(alpha = correlation), width = 1, color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "kk")+
geom_edge_fan(aes(alpha = 2 * correlation), width = 1, color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
?geom_edge_link
a %>% ggraph(layout = "kk")+
geom_edge_arc(aes(alpha = correlation, width = correlation), color = "darkgreen") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
a %>% ggraph(layout = "linear", circular = T)+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "red") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
set.seed(1011)
a <- president_cors %>%
filter(correlation > .3) %>%
igraph::graph_from_data_frame()
igraph::V(a)$party <- party_vec[names(igraph::V(a))]
a %>% ggraph(layout = "linear", circular = T)+
geom_edge_link(aes(alpha = correlation, width = correlation), color = "lightblue") +
geom_node_point(size = 6, aes(color = party)) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
speeches <- list.files('./datasets/presidential-speeches/')
system.time()
Sys.time()
speeches <- list.files('./datasets/presidential-speeches/')
head(speeches)
speech_dates <- as.Date(substr(speeches, 1, 10))
setwd("D:/Dataprojects/Natural_Language_Processing_Soumendu_da/Text Mining in R")
speeches <- list.files('../datasets/presidential-speeches/')
head(speeches)
pres_df <- readRDS('../datasets/US-president.Rds')
pres_df
library(stringr)
library(tidytext)
library(readr)
library(dplyr)
library(ggplot2)
pres_df <- readRDS('../datasets/US-president.Rds')
pres_df <- readRDS('../datasets/US-president.Rds')
pres_df
as.Date(Sys.Date())
Sys.Date()
party_names <- pres_df$party
pres_names <- pres_df$president
names(party_names) <- names(pres_names) <- pres_df$date  # create the named vectors
factored_speech_dates <- cut(speech_dates, c(pres_df$date, Sys.Date() ))   # we use today's date as endpoint
tmp <- read_lines('../datasets/presidential-speeches/1789-04-30-first-inaugural-address.txt')
tmp
tmp[1]
grep(tmp[1], "President: ")
grep(tmp[1], "President")
grepl(tmp[1], "President")
?substring()
substr(tmp[1], 5)
substring(tmp[1], 5)
substring(tmp[1], 10)
substring(tmp[1], 12)
pres_df
rm(list = ls())
library(stringr)
library(tidytext)
library(readr)
library(dplyr)
library(ggplot2)
speeches <- list.files('../datasets/presidential-speeches/')
head(speeches)
tmp <- read_lines('../datasets/presidential-speeches/1789-04-30-first-inaugural-address.txt')
tmp[1:5]
speech_dates <- as.Date(substr(speeches, 1, 10))
speech_list <- vector(mode = "list", length = length(speeches))  # create a blank list
for (i in 1:length(speeches)) {
tmp <- read_lines(paste0('../datasets/presidential-speeches/', speeches[i]))
speech_list[[i]] <- tibble(line = 2:length(tmp), text = tmp[2:length(tmp)])  # we do not take the first line
speech_list[[i]]$president <- substring(tmp[1], 12)   # Take it from 12 character onwards
speech_list[[i]]$date <- speech_dates[i]
}
speech_df <- bind_rows(speech_list)  # finally bind all rows of
pres_df <- readRDS('../datasets/US-president.Rds')
speech_df <- speech_df %>% filter(text != "") %>%
left_join(pres_df[, c(2, 3)], by = c("president" = "president"))
speech_df
speech_df <- speech_df %>% mutate(text = str_to_lower(text) )
# the next thing is processing apostrophe
patterns <- c(
"n't" = " not",
"'ve" = " have",
"'ll" = " will",
"'m" = " am",
"'re" = " are",
"this's" = "this is",
"that's" = "that is",
"it's" = "it is",
"'s" = "",
"mr." = "",
"mrs." = "",
"ms." = "",
"sr." = ""
)
speech_df <- speech_df %>%
mutate(text = str_replace_all(string = text, pattern = patterns ) ) %>%
mutate(text = str_replace_all(text, pattern = "[^a-zA-Z\\s]", replacement = " ") )
words_df <- speech_df %>% unnest_tokens(word, text)
data("stop_words")
words_df <- words_df %>% anti_join(stop_words)
term_df <- words_df %>% count(word, date)
head(term_df)
# couting tf-idf and term document matrix
term_doc <- words_df %>% group_by(date, word) %>% summarise(count = n())
rm(term_doc)
a <- speech_df %>% group_by(date, president, party) %>% summarise()
a
term_df <- words_df %>% count(word, date)  # create the term document dataframe
term_df <- term_df %>% bind_tf_idf(word, date, n)
rm(a)
term_df
tmp <- speech_df %>% group_by(date, president, party) %>% summarise()   # create a dataframe with speech date, president, party
term_df <- term_df %>% left_join(tmp, by = c("date" = "date"))
term_df
saveRDS(term_df, '../datasets/US-president-speech-termdoc.Rds')
hist(term_df$tf_idf)
term_df %>% dplyr::filter(tf_idf < 0.05) %>%
ggplot(aes(x = tf_idf)) + geom_histogram(binwidth = 1e-3)
term_df %>% dplyr::filter(tf_idf < 0.04) %>%
ggplot(aes(x = tf_idf)) + geom_histogram(fill = "brown")
term_df %>% dplyr::filter(tf_idf < 0.035) %>%
ggplot(aes(x = tf_idf)) + geom_histogram(fill = "brown", bins = 1e3)
term_df %>% dplyr::filter(tf_idf < 0.035) %>%
ggplot(aes(x = tf_idf)) + geom_histogram(fill = "brown", bins = 1e2)
term_df %>% dplyr::filter(tf_idf < 0.035) %>%
ggplot(aes(x = tf_idf)) + geom_histogram(fill = "brown", bins = 2e2)
term_df %>% dplyr::filter(tf_idf < 0.02) %>%
ggplot(aes(x = tf_idf)) + geom_histogram(fill = "brown", bins = 2e2)
term_df %>% dplyr::filter(tf_idf < 0.01) %>%
ggplot(aes(x = tf_idf)) + geom_histogram(fill = "brown", bins = 2e2)
rm(words_df)
rm(tmp)
rm(speech_list)
a = term_df %>% dplyr::filter(party %in% c("Republican", "Democratic"))
rm(a)
term_df <- term_df %>% dplyr::filter(party %in% c("Republican", "Democratic"))
speech_dates <- unique(term_doc$date)
speech_dates <- unique(term_df$date)
head(speech_dates)
length(speech_dates)
809 * 0.75
set.seed(2020)  # set a seed so that this is reproducible
trainIndex <- sample(speech_dates, size = 609)
set.seed(2020)  # set a seed so that this is reproducible
trainIndex <- sample(speech_dates, size = 609)
# create training set
traindata <- term_df %>% filter(date %in% trainIndex)
traindata %>% group_by(party) %>% summarise(n = length(unique(date)))
# create testing set
testdata <- term_df %>% filter(! (date %in% trainIndex))
testdata %>% group_by(party) %>% summarise(n = length(unique(date)))
?lda_tidiers
?MASS::lda
library(Matrix)
head(traindata)
term_doc <- traindata %>% cast_sparse(word, date, n)
rm(term_doc)
train_doc <- traindata %>% cast_sparse(word, date, n)
dim(train_doc)
MASS::lda(train_doc)
a = MASS::lda(train_doc, traindata$party)
a = MASS::lda(t(train_doc), traindata$party)
dim(t(train_doc))
length(traindata$party)
rownames(train_doc)
colnames(train_doc)
speech_df
tmp <- speech_df %>% group_by(date, president, party) %>% summarise()   # create a dataframe with speech date, president, party
tmp
party_names <- tmp$party
names(party_names) <- tmp$date
train_labels <- party_names[colnames(train_doc)]
fit.LDA <- MASS::lda(t(train_doc), train_labels)
train_doc <- traindata %>% cast_sparse(word, date, n)
dim(train_doc)
a <- prcomp(train_doc)
a$sdev
a$center
plot(1:609, cumsum(a$sdev), type = "l")
a$rotation
sum(a$sdev)
sum(a$sdev^2)
plot(1:609, cumsum(a$sdev^2)/sum(a$sdev^2), type = "l")
rm(a)
train_doc <- traindata %>% cast_sparse(date, word, n)
dim(train_doc)
term_df
?top_n
red_term_df <- term_df %>%
group_by(party, date, word) %>%
summarise(mean_tf_idf = mean(tf_idf)) %>%
group_by(party) %>%
top_n(n = 100, wt = desc(tf_idf)) %>% ungroup()
red_term_df <- term_df %>%
group_by(party, date, word) %>%
summarise(mean_tf_idf = mean(tf_idf)) %>%
group_by(party) %>%
top_n(n = 100, wt = desc(mean_tf_idf)) %>% ungroup()
red_term_df
unique(red_term_df$word)
View(red_term_df)
red_term_df <- term_df %>%
group_by(party, word) %>%
summarise(mean_tf_idf = mean(tf_idf)) %>%
group_by(party) %>%
top_n(n = 100, wt = desc(mean_tf_idf)) %>% ungroup()
unique(red_term_df)
unique(red_term_df$word)
View(red_term_df)
red_term_df <- term_df %>%
group_by(party, word) %>%
summarise(mean_tf_idf = mean(tf_idf)) %>%
group_by(party) %>%
arrange(desc(mean_tf_idf)) %>% top_n(100)
red_term_df
table(red_term_df$party)
train_red <- traindata %>%
group_by(party, word) %>%
summarise(mean_tf_idf = mean(tf_idf)) %>%
group_by(party) %>%
arrange(desc(mean_tf_idf)) %>% top_n(100)
rm(red_term_df)
train_red
# filter both the traindata and testdata to contain only required words
traindata <- traindata %>% filter(word %in% train_red$word)
testdata <- testdata %>% filter(word %in% train_red$word)
train_doc <- traindata %>% cast_sparse()
rm(train_doc)
traindata
train_doc <- traindata %>% cast_sparse(date, word, n)
train_doc
dim(train_doc)
unique(traindata$president)
train_doc <- traindata %>% cast_sparse(date, word, n)
dim(train_doc)
test_doc <- testdata %>% cast_sparse(date, word, n)
dim(test_doc)
testdata
rownames(test_doc)
colnames(test_doc)
train_doc <- traindata %>% cast_sparse(date, word, n)
dim(train_doc)
set.seed(2020)  # set a seed so that this is reproducible
trainIndex <- sample(speech_dates, size = 609)
# create training set
traindata <- term_df %>% filter(date %in% trainIndex)
traindata %>% group_by(party) %>% summarise(n = length(unique(date)))
# create testing set
testdata <- term_df %>% filter(! (date %in% trainIndex))
testdata %>% group_by(party) %>% summarise(n = length(unique(date)))
# filter both the traindata and testdata to contain only required words
red_traindata <- traindata %>% filter(word %in% train_red$word)
red_testdata <- testdata %>% filter(word %in% train_red$word)
train_doc <- red_traindata %>% cast_sparse(date, word, n)
dim(train_doc)
unique(train_red$word)
length(unique(train_red$word))
red_traindata
red_words <- sort(unique(train_red$word))
red_traindata <- rbind(red_traindata, tibble(word = red_words, date = NA, n = 0, tf = 0, idf = 0, tf_idf = 0, president = NA, party = NA) )
tail(red_traindata)
train_doc <- red_traindata %>% cast_sparse(date, word, n)
dim(train_doc)
rownames(train_doc)
train_doc <- train_doc[!is.na(rownames(train_doc)), red_words]
dim(train_doc)
red_testdata <- rbind(red_testdata, tibble(word = red_words, date = NA, n = 0, tf = 0, idf = 0, tf_idf = 0, president = NA, party = NA) )
test_doc <- red_testdata %>% cast_sparse(date, word, n)
dim(test_doc)
test_doc <- red_testdata %>% cast_sparse(date, word, n)
test_doc <- train_doc[!is.na(rownames(test_doc)), red_words]
colnames(test_doc)
training_labels <- party_names[rownames(train_doc)]
testing_labels <- party_names[rownames(test_doc)]
testing_labels
fit.LDA <- MASS::lda(train_doc, training_labels)
fit.LDA
preds <- predict(fit.LDA, newdata = test_doc)
preds$class
preds$posterior
table(testing_labels, preds)
length(preds)
table(testing_labels, preds$class)
